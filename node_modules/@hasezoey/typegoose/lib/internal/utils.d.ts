import * as mongoose from 'mongoose';
import { AnyParamConstructor, PropOptionsWithNumberValidate, PropOptionsWithStringValidate, VirtualOptions } from '../types';
import { DecoratorKeys } from './constants';
/**
 * Returns true, if it includes the Type
 * @param Type The Type
 * @returns true, if it includes it
 */
export declare function isPrimitive(Type: any): boolean;
/**
 * Returns true, if it is an Object
 * @param Type The Type
 * @returns true, if it is an Object
 */
export declare function isObject(Type: any): boolean;
/**
 * Returns true, if it is an Number
 * @param Type The Type
 * @returns true, if it is an Number
 */
export declare function isNumber(Type: any): Type is number;
/**
 * Returns true, if it is an String
 * @param Type The Type
 * @returns true, if it is an String
 */
export declare function isString(Type: any): Type is string;
/**
 * Initialize as Object
 * @param name The Name of the Schema
 * @param key The Property key to set
 */
export declare function initAsObject(name: string, key: string): void;
/**
 * Initialize as Array
 * @param name The Name of the Schema
 * @param key The Property key to set
 */
export declare function initAsArray(name: string, key: string): void;
/**
 * Get the Class for a given Document
 * @param document The Document
 */
export declare function getClassForDocument(document: mongoose.Document): NewableFunction | undefined;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
export declare function isWithStringValidate(options: PropOptionsWithStringValidate): options is PropOptionsWithStringValidate;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
export declare function isWithStringTransform(options: PropOptionsWithStringValidate): options is PropOptionsWithStringValidate;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
export declare function isWithNumberValidate(options: PropOptionsWithNumberValidate): options is PropOptionsWithNumberValidate;
/**
 * Check if Options include Virtual Populate Options
 * @param options RawOptions of the Prop
 */
export declare function isWithVirtualPOP(options: any): options is VirtualOptions;
export declare const allVirtualoptions: string[];
/**
 * Check if All the required Options are present
 * @param options RawOptions of the Prop
 */
export declare function includesAllVirtualPOP(options: VirtualOptions): options is VirtualOptions;
/**
 * Merges existing metadata with new value
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
export declare function assignMetadata(key: DecoratorKeys, value: unknown, cl: new () => {}): void;
/**
 * Get the correct name of the class's model
 * (with suffix)
 * @param cl The Class
 */
export declare function getName<T, U extends AnyParamConstructor<T>>(cl: U): string;
