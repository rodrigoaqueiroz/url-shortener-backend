"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
require("reflect-metadata");
const data_1 = require("./data");
__export(require("./method"));
__export(require("./prop"));
__export(require("./hooks"));
__export(require("./plugin"));
__export(require("."));
__export(require("./typeguards"));
var utils_1 = require("./utils");
exports.getClassForDocument = utils_1.getClassForDocument;
class Typegoose {
    getModelForClass(t, { existingMongoose, schemaOptions, existingConnection } = {}) {
        const name = this.constructor.name;
        if (!data_1.models[name]) {
            this.setModelForClass(t, {
                existingMongoose,
                schemaOptions,
                existingConnection,
            });
        }
        return data_1.models[name];
    }
    setModelForClass(t, { existingMongoose, schemaOptions, existingConnection } = {}) {
        const name = this.constructor.name;
        const sch = this.buildSchema(t, { existingMongoose, schemaOptions });
        let model = mongoose.model.bind(mongoose);
        if (existingConnection) {
            model = existingConnection.model.bind(existingConnection);
        }
        else if (existingMongoose) {
            model = existingMongoose.model.bind(existingMongoose);
        }
        data_1.models[name] = model(name, sch);
        data_1.constructors[name] = this.constructor;
        return data_1.models[name];
    }
    buildSchema(t, { schemaOptions } = {}) {
        const name = this.constructor.name;
        let sch = _buildSchema(t, name, schemaOptions);
        let parentCtor = Object.getPrototypeOf(this.constructor.prototype).constructor;
        while (parentCtor && parentCtor.name !== 'Typegoose' && parentCtor.name !== 'Object') {
            sch = _buildSchema(t, parentCtor.name, schemaOptions, sch);
            parentCtor = Object.getPrototypeOf(parentCtor.prototype).constructor;
        }
        return sch;
    }
}
exports.Typegoose = Typegoose;
function _buildSchema(t, name, schemaOptions, sch) {
    const Schema = mongoose.Schema;
    if (!sch) {
        sch = schemaOptions ? new Schema(data_1.schema[name], schemaOptions) : new Schema(data_1.schema[name]);
    }
    else {
        sch.add(data_1.schema[name]);
    }
    const staticMethods = data_1.methods.staticMethods[name];
    if (staticMethods) {
        sch.statics = Object.assign(staticMethods, sch.statics || {});
    }
    else {
        sch.statics = sch.statics || {};
    }
    const instanceMethods = data_1.methods.instanceMethods[name];
    if (instanceMethods) {
        sch.methods = Object.assign(instanceMethods, sch.methods || {});
    }
    else {
        sch.methods = sch.methods || {};
    }
    if (data_1.hooks[name]) {
        data_1.hooks[name].pre.forEach(preHookArgs => {
            sch.pre(...preHookArgs);
        });
        data_1.hooks[name].post.forEach(postHookArgs => {
            sch.post(...postHookArgs);
        });
    }
    if (data_1.plugins[name]) {
        for (const plugin of data_1.plugins[name]) {
            sch.plugin(plugin.mongoosePlugin, plugin.options);
        }
    }
    const getterSetters = data_1.virtuals[name];
    if (getterSetters) {
        for (const key of Object.keys(getterSetters)) {
            if (getterSetters[key].options && getterSetters[key].options.overwrite) {
                sch.virtual(key, getterSetters[key].options);
            }
            else {
                if (getterSetters[key].get) {
                    sch.virtual(key, getterSetters[key].options).get(getterSetters[key].get);
                }
                if (getterSetters[key].set) {
                    sch.virtual(key, getterSetters[key].options).set(getterSetters[key].set);
                }
            }
        }
    }
    const indices = Reflect.getMetadata('typegoose:indices', t) || [];
    for (const index of indices) {
        sch.index(index.fields, index.options);
    }
    return sch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWdvb3NlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVnb29zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHFDQUFxQztBQUNyQyw0QkFBMEI7QUFFMUIsaUNBQXlGO0FBR3pGLDhCQUF5QjtBQUN6Qiw0QkFBdUI7QUFDdkIsNkJBQXdCO0FBQ3hCLDhCQUF5QjtBQUN6Qix1QkFBa0I7QUFDbEIsa0NBQTZCO0FBQzdCLGlDQUE4QztBQUFyQyxzQ0FBQSxtQkFBbUIsQ0FBQTtBQWlCNUIsTUFBYSxTQUFTO0lBWWIsZ0JBQWdCLENBQ3JCLENBQUksRUFDSixFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsS0FBOEIsRUFBRTtRQUVyRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZCLGdCQUFnQjtnQkFDaEIsYUFBYTtnQkFDYixrQkFBa0I7YUFDbkIsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLGFBQU0sQ0FBQyxJQUFJLENBQXdCLENBQUM7SUFDN0MsQ0FBQztJQVlNLGdCQUFnQixDQUNyQixDQUFJLEVBQ0osRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEtBQThCLEVBQUU7UUFFckYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFbkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBSSxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRXhFLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksa0JBQWtCLEVBQUU7WUFDdEIs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