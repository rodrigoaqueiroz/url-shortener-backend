"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const util_1 = require("util");
const constants_1 = require("./constants");
const data_1 = require("./data");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
/**
 * Private schema builder out of class props
 * -> If you discover this, dont use this function, use Typegoose.buildSchema!
 * @param cl The not initialized Class
 * @param name The Name to save the Schema Under (Mostly Constructor.name)
 * @param sch Already Existing Schema?
 * @returns Returns the Build Schema
 * @private
 */
function _buildSchema(cl, sch, opt = {}) {
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    // Option sanity check
    opt = util_1.isNullOrUndefined(opt) || typeof opt !== 'object' ? {} : opt;
    const name = utils_1.getName(cl);
    if (data_1.buildSchemas.get(name)) {
        return data_1.buildSchemas.get(name);
    }
    /** Simplify the usage */
    const Schema = mongoose.Schema;
    const { schemaOptions: ropt } = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, cl) || {};
    const schemaOptions = Object.assign(ropt || {}, opt);
    if (!data_1.schemas.get(name)) {
        data_1.schemas.set(name, {});
    }
    if (!(sch instanceof Schema)) {
        sch = new Schema(data_1.schemas.get(name), schemaOptions);
    }
    else {
        sch = sch.clone();
        sch.add(data_1.schemas.get(name));
    }
    sch.loadClass(cl);
    const hook = data_1.hooks.get(name);
    if (hook) {
        hook.pre.forEach((func, method) => {
            sch.pre(method, func);
            // ^ look at https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37333
        });
        hook.post.forEach((v, k) => sch.post(k, v));
    }
    if (data_1.plugins.get(name)) {
        for (const plugin of data_1.plugins.get(name)) {
            sch.plugin(plugin.mongoosePlugin, plugin.options);
        }
    }
    /** Simplify the usage */
    const getterSetters = data_1.virtuals.get(name);
    if (getterSetters) {
        for (const [key, virtual] of getterSetters) {
            sch.virtual(key, virtual);
        }
    }
    /** Get Metadata for indices */
    const indices = Reflect.getMetadata(constants_1.DecoratorKeys.Index, cl) || [];
    for (const index of indices) {
        sch.index(index.fields, index.options);
    }
    data_1.buildSchemas.set(name, sch);
    return sch;
}
exports._buildSchema = _buildSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVybmFsL3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQUVyQywrQkFBeUM7QUFFekMsMkNBQTRDO0FBQzVDLGlDQUF5RTtBQUN6RSxxQ0FBd0M7QUFDeEMsbUNBQWtDO0FBRWxDOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsWUFBWSxDQUMxQixFQUFLLEVBQ0wsR0FBcUIsRUFDckIsTUFBOEIsRUFBRTtJQUVoQyxJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsRUFBRTtRQUM1QixNQUFNLElBQUkscUJBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM1QjtJQUVELHNCQUFzQjtJQUN0QixHQUFHLEdBQUcsd0JBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUVuRSxNQUFNLElBQUksR0FBRyxlQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekIsSUFBSSxtQkFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQixPQUFPLG1CQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9CO0lBRUQseUJBQXlCO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDL0IsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBa0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyx5QkFBYSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekcsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXJELElBQUksQ0FBQyxjQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RCLGNBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxjQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0tBQ3BEO1NBQU07UUFDTCxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQzVCO0lBRUQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsQixNQUFNLElBQUksR0FBRyxZQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDaEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFnQixFQUFFLElBQW1CLENBQUMsQ0FBQztZQUMvQyw0RUFBNEU7UUFDOUUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0M7SUFFRCxJQUFJLGNBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDckIsS0FBSyxNQUFNLE1BQU0sSUFBSSxjQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbkQ7S0FDRjtJQUVELHlCQUF5QjtJQUN6QixNQUFNLGFBQWEsR0FBRyxlQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLElBQUksYUFBYSxFQUFFO1FBQ2pCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxhQUFhLEVBQUU7WUFDMUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDM0I7S0FDRjtJQUVELCtCQUErQjtJQUMvQixNQUFNLE9BQU8sR0FBVSxPQUFPLENBQUMsV0FBVyxDQUFDLHlCQUFhLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxRSxLQUFLLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBRTtRQUMzQixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsbUJBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTVCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQXBFRCxvQ0FvRUMifQ==